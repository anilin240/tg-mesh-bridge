#!/usr/bin/env python3
import sys
import os
sys.path.insert(0, "src")

def test_mqtt_publisher():
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º MQTT Publisher...")
    try:
        from bridge.mqtt import publish_to_topic, publish_downlink
        import time
        
        result1 = publish_to_topic("test/improvements", {"test": "mqtt_publisher", "timestamp": time.time()})
        print(f"‚úÖ –¢–µ—Å—Ç 1 - –û–±—ã—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {result1}")
        
        result2 = publish_downlink({"to": 123456, "type": "sendtext", "payload": "[[TG]] Test message"})  # Example node ID
        print(f"‚úÖ –¢–µ—Å—Ç 2 - publish_downlink: {result2}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MQTT Publisher: {e}")
        return False

def test_consumer_improvements():
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Consumer —É–ª—É—á—à–µ–Ω–∏—è...")
    try:
        from bridge.consumer import get_node_display_name
        display_name = get_node_display_name(123456)  # Example node ID
print(f"‚úÖ get_node_display_name(123456): {display_name}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Consumer: {e}")
        return False

def test_database():
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from common.db import SessionLocal
        from common.models import Node
        from sqlalchemy import select
        
        with SessionLocal() as session:
            result = session.execute(select(Node.user_label)).first()
            print(f"‚úÖ user_label –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {result is not None}")
            
            nodes_count = session.execute(select(Node)).scalars().all()
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –≤ –±–∞–∑–µ: {len(nodes_count)}")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_i18n():
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º i18n...")
    try:
        from common.i18n import t
        
        ru_text = t("ru", "dev.enter_node_id")
        print(f"‚úÖ RU dev.enter_node_id: {ru_text}")
        
        en_text = t("en", "dev.enter_node_id")
        print(f"‚úÖ EN dev.enter_node_id: {en_text}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ i18n: {e}")
        return False

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 50)
    
    tests = [
        ("MQTT Publisher", test_mqtt_publisher),
        ("Consumer —É–ª—É—á—à–µ–Ω–∏—è", test_consumer_improvements),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("i18n", test_i18n),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –£–õ–£–ß–®–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

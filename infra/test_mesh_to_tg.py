#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Mesh‚ÜíTG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import paho.mqtt.client as mqtt
import json
import time
import sys

def test_mesh_to_tg():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Mesh –≤ Telegram"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host = "localhost"
    port = 1883
    username = "your_mqtt_username"
    password = "your_mqtt_password"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_code = "EXAMPLE123"  # Example user code
    test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Mesh"
    
    print(f"üîç –¢–µ—Å—Ç Mesh‚ÜíTG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT: {host}:{port}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    print(f"üîë –ö–æ–¥: {test_code}")
    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º MQTT –∫–ª–∏–µ–Ω—Ç–∞
    client = mqtt.Client()
    client.username_pw_set(username, password)
    
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {rc}")
    
    def on_publish(client, userdata, mid):
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {mid}")
    
    client.on_connect = on_connect
    client.on_publish = on_publish
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        client.connect(host, port, 60)
        client.loop_start()
        
        # –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        time.sleep(2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        payload = f"@tg:{test_code} {test_message}"
        
        # –°–æ–∑–¥–∞—ë–º JSON —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = {
            "from": 123456,  # Example node_id
            "sender": "!b03b3d9c",  # Gateway
            "payload": payload,
            "id": int(time.time()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            "type": "text"
        }
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ —Ç–æ–ø–∏–∫
        topic = "msh/US/2/json/test"
        result = client.publish(topic, json.dumps(message))
        
        if result.rc == 0:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫: {topic}")
            print(f"üìÑ JSON: {json.dumps(message, indent=2)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result.rc}")
        
        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(3)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        client.loop_stop()
        client.disconnect()
    
    return True

def test_mesh_to_tg_limit():
    """–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    
    host = "localhost"
    port = 1883
    username = "your_mqtt_username"
    password = "your_mqtt_password"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    test_code = "EXAMPLE456"  # Example user code for limit test
    test_message = "–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"
    
    print(f"\nüîç –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    print(f"üîë –ö–æ–¥: {test_code}")
    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
    print("=" * 50)
    
    client = mqtt.Client()
    client.username_pw_set(username, password)
    
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {rc}")
    
    def on_publish(client, userdata, mid):
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {mid}")
    
    client.on_connect = on_connect
    client.on_publish = on_publish
    
    try:
        client.connect(host, port, 60)
        client.loop_start()
        time.sleep(2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º node_id
        payload = f"@tg:{test_code} {test_message}"
        
        message = {
            "from": 999999999,  # –ù–æ–≤—ã–π node_id
            "sender": "!b03b3d9c",
            "payload": payload,
            "id": int(time.time()),
            "type": "text"
        }
        
        topic = "msh/US/2/json/test"
        result = client.publish(topic, json.dumps(message))
        
        if result.rc == 0:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫: {topic}")
            print(f"üìÑ JSON: {json.dumps(message, indent=2)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result.rc}")
        
        time.sleep(3)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        client.loop_stop()
        client.disconnect()
    
    return True

if __name__ == "__main__":
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MESH‚ÜíTG –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success1 = test_mesh_to_tg()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    success2 = test_mesh_to_tg_limit()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print(f"–¢–µ—Å—Ç 1 (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {'‚úÖ –ü–†–û–ô–î–ï–ù' if success1 else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç 2 (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞): {'‚úÖ –ü–†–û–ô–î–ï–ù' if success2 else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")

#!/usr/bin/env python3

import paho.mqtt.client as mqtt
import json
import time
from datetime import datetime

# MQTT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MQTT_HOST = "192.168.50.81"
MQTT_PORT = 1883
MQTT_USER = "bridge"
MQTT_PASS = "bridge"
MQTT_TOPIC = "msh/US/2/json/#"

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É {MQTT_HOST}:{MQTT_PORT} —É—Å–ø–µ—à–Ω–æ!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {MQTT_USER}")
        print(f"üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫: {MQTT_TOPIC}")
        client.subscribe(MQTT_TOPIC, qos=0)
        print("üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–æ–¥!")
        print("-" * 50)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {rc}")

def on_message(client, userdata, msg):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"\nüì® [{timestamp}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(f"   –¢–æ–ø–∏–∫: {msg.topic}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        payload = msg.payload.decode('utf-8', errors='replace')
        print(f"   –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {payload}")
        
        data = json.loads(payload)
        print(f"   üìã JSON –¥–∞–Ω–Ω—ã–µ:")
        for key, value in data.items():
            print(f"      {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ @tg:
        if 'payload' in data and isinstance(data['payload'], str):
            payload_text = data['payload']
            if '@tg:' in payload_text:
                print(f"   üéØ –ù–∞–π–¥–µ–Ω –∫–æ–¥ @tg: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
                import re
                match = re.search(r'@tg:([A-Z0-9]{4,8})', payload_text)
                if match:
                    code = match.group(1)
                    print(f"   üîë –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥: {code}")
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–¥–∞
                    message_start = payload_text.find(code) + len(code)
                    message = payload_text[message_start:].strip()
                    if message:
                        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
    except json.JSONDecodeError:
        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
        print(f"   –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {msg.payload.decode('utf-8', errors='replace')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    print("-" * 50)

def on_disconnect(client, userdata, rc):
    print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞: {rc}")

def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {MQTT_HOST}:{MQTT_PORT}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {MQTT_USER}")
    print(f"üì° –¢–æ–ø–∏–∫: {MQTT_TOPIC}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
    client = mqtt.Client(client_id="test-mqtt-client")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    client.username_pw_set(MQTT_USER, MQTT_PASS)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    client.on_connect = on_connect
    client.on_message = on_message
    client.on_disconnect = on_disconnect
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É...")
        client.connect(MQTT_HOST, MQTT_PORT, 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        client.loop_forever()
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        client.disconnect()
        print("üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()

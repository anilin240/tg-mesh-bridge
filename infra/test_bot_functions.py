#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""
import requests
import json
import time
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
CHAT_ID = "123456789"  # Example test user ID
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def send_message(text, chat_id=CHAT_ID):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É"""
    url = f"{BASE_URL}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text
    }
    response = requests.post(url, json=data)
    return response.json()

def send_callback_query(callback_data, chat_id=CHAT_ID, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å callback query"""
    url = f"{BASE_URL}/answerCallbackQuery"
    data = {
        "callback_query_id": "test_query",
        "chat_id": chat_id,
        "message_id": message_id,
        "data": callback_data
    }
    response = requests.post(url, json=data)
    return response.json()

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
    url = f"{BASE_URL}/getUpdates"
    params = {"timeout": 30}
    if offset:
        params["offset"] = offset
    response = requests.get(url, params=params)
    return response.json()

def test_start_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
    print("üîç –¢–µ—Å—Ç 1: /start –∫–æ–º–∞–Ω–¥–∞")
    print("=" * 50)
    
    result = send_message("/start")
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: /start")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result.get("ok"):
        print("‚úÖ /start –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("‚ùå /start –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

def test_tg_code_menu():
    """–¢–µ—Å—Ç –º–µ–Ω—é TG-–∫–æ–¥"""
    print("\nüîç –¢–µ—Å—Ç 2: –ú–µ–Ω—é TG-–∫–æ–¥")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞
    print("üìñ –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∫–æ–¥–∞...")
    result = send_callback_query('{"section": "code", "action": "show"}')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞: {result}")
    
    # –¢–µ—Å—Ç —Å–º–µ–Ω—ã –∫–æ–¥–∞
    print("üîÑ –¢–µ—Å—Ç —Å–º–µ–Ω—ã –∫–æ–¥–∞...")
    result = send_callback_query('{"section": "code", "action": "change"}')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–º–µ–Ω—ã: {result}")
    
    return True

def test_devices_menu():
    """–¢–µ—Å—Ç –º–µ–Ω—é –ú–æ–∏ –Ω–æ–¥—ã"""
    print("\nüîç –¢–µ—Å—Ç 3: –ú–µ–Ω—é –ú–æ–∏ –Ω–æ–¥—ã")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    print("üìã –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    result = send_callback_query('{"section": "dev", "action": "list"}')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∫–∞: {result}")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    print("‚ûï –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    result = send_callback_query('{"section": "dev", "action": "add"}')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {result}")
    
    return True

def test_nearby_menu():
    """–¢–µ—Å—Ç –º–µ–Ω—é –†—è–¥–æ–º"""
    print("\nüîç –¢–µ—Å—Ç 4: –ú–µ–Ω—é –†—è–¥–æ–º")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    print("üîÑ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞...")
    result = send_callback_query('{"section": "nearby", "action": "refresh"}')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
    
    return True

def test_fallback_handler():
    """–¢–µ—Å—Ç fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç 5: Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    print("üìù –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...")
    result = send_message("–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    return True

def test_mesh_to_tg():
    """–¢–µ—Å—Ç Mesh‚ÜíTG —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç 6: Mesh‚ÜíTG —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ MQTT
    print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ MQTT –ª–æ–≥–æ–≤...")
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ consumer'–∞
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
    print(f"–ë–æ—Ç —Ç–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {CHAT_ID}")
    print("=" * 60)
    
    tests = [
        ("/start –∫–æ–º–∞–Ω–¥–∞", test_start_command),
        ("–ú–µ–Ω—é TG-–∫–æ–¥", test_tg_code_menu),
        ("–ú–µ–Ω—é –ú–æ–∏ –Ω–æ–¥—ã", test_devices_menu),
        ("–ú–µ–Ω—é –†—è–¥–æ–º", test_nearby_menu),
        ("Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫", test_fallback_handler),
        ("Mesh‚ÜíTG —Å–æ–æ–±—â–µ–Ω–∏—è", test_mesh_to_tg),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            print(f"‚úÖ {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ù–ï –ü–†–û–ô–î–ï–ù'}")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        return 1

if __name__ == "__main__":
    if len(sys.argv) > 1:
        BOT_TOKEN = sys.argv[1]
    if len(sys.argv) > 2:
        CHAT_ID = sys.argv[2]
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç: python test_bot_functions.py YOUR_BOT_TOKEN [CHAT_ID]")
        sys.exit(1)
    
    sys.exit(main())
